"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _Tile = _interopRequireDefault(require("../utils/Tile"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ImageTileModel = function (_BaseModel) {
  (0, _inherits2.default)(ImageTileModel, _BaseModel);

  var _super = _createSuper(ImageTileModel);

  function ImageTileModel() {
    var _this;

    (0, _classCallCheck2.default)(this, ImageTileModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tileLayer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "timestamp", void 0);
    return _this;
  }

  (0, _createClass2.default)(ImageTileModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      return {};
    }
  }, {
    key: "tile",
    value: function tile() {
      var _this$mapService$getB = this.mapService.getBounds(),
          _this$mapService$getB2 = (0, _slicedToArray2.default)(_this$mapService$getB, 2),
          WS = _this$mapService$getB2[0],
          EN = _this$mapService$getB2[1];

      var NE = {
        lng: EN[0],
        lat: EN[1]
      };
      var SW = {
        lng: WS[0],
        lat: WS[1]
      };
      this.tileLayer.calCurrentTiles({
        NE: NE,
        SW: SW,
        tileCenter: this.mapService.getCenter(),
        currentZoom: this.mapService.getZoom(),
        minSourceZoom: this.mapService.getMinZoom(),
        minZoom: this.mapService.getMinZoom(),
        maxZoom: this.mapService.getMaxZoom()
      });
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _this2 = this;

      this.layer.zIndex = -999;

      var _ref = this.layer.getLayerConfig(),
          _ref$resolution = _ref.resolution,
          resolution = _ref$resolution === void 0 ? 'low' : _ref$resolution,
          _ref$maxSourceZoom = _ref.maxSourceZoom,
          maxSourceZoom = _ref$maxSourceZoom === void 0 ? 17 : _ref$maxSourceZoom;

      var source = this.layer.getSource();

      if (source.data.tileurl) {
        this.tileLayer = new _Tile.default({
          url: source.data.tileurl,
          layerService: this.layerService,
          layer: this.layer,
          resolution: resolution,
          maxSourceZoom: maxSourceZoom,
          crstype: 'epsg3857'
        });
        this.tile();
        this.mapService.on('mapchange', function (e) {
          if (_this2.timestamp) {
            clearTimeout(_this2.timestamp);
            _this2.timestamp = null;
          }

          _this2.timestamp = setTimeout(function () {
            if (_this2.mapService.getZoom() >= 2.0) {
              _this2.tile();
            }
          }, 500);
        });
      }

      return [];
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      this.tileLayer.removeTiles();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return this.initModels();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      return;
    }
  }]);
  return ImageTileModel;
}(_BaseModel2.default);

exports.default = ImageTileModel;
//# sourceMappingURL=imagetile.js.map