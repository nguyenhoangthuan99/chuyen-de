{"version":3,"sources":["../../../src/polygon/models/fill.ts"],"names":["FillModel","layer","getLayerConfig","raisingHeight","opacity","opacityLinear","enable","dir","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","gl","LUMINANCE","type","FLOAT","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_raisingHeight","Number","u_opacity","u_opacitylinear","u_dir","buildModels","mask","maskInside","triangulation","polygonTriangulationWithCenter","polygonTriangulation","buildLayerModel","moduleName","vertexShader","polygon_linear_vert","polygon_vert","fragmentShader","polygon_linear_frag","polygon_frag","blend","getBlend","depth","cull","face","BACK","stencil","destroy","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","STATIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","normal","BaseModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;;;;;;;IAQqBA,S;;;;;;;;;;;;WACnB,wBAAsB;AACpB,iBAOI,KAAKC,KAAL,CAAWC,cAAX,EAPJ;AAAA,oCACEC,aADF;AAAA,UACEA,aADF,mCACkB,CADlB;AAAA,8BAEEC,OAFF;AAAA,UAEEA,OAFF,6BAEY,CAFZ;AAAA,oCAGEC,aAHF;AAAA,UAGEA,aAHF,mCAGkB;AACdC,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,EAAE;AAFS,OAHlB;;AAQA,UAAI,KAAKC,eAAL,IAAwB,KAAKC,qBAAL,CAA2B;AAAEL,QAAAA,OAAO,EAAPA;AAAF,OAA3B,CAA5B,EAAqE;AACnE,aAAKM,oBAAL,CAA0B;AAAEN,UAAAA,OAAO,EAAPA;AAAF,SAA1B;AACA,YAAMO,UAAU,GAAG,KAAKV,KAAL,CAAWW,cAAX,EAAnB;;AACA,iCAAgC,KAAKC,YAAL,CAC9B,KAAKC,UADyB,EAE9BH,UAF8B,EAG9B,KAAKI,cAHyB,CAAhC;AAAA,YAAQC,IAAR,sBAAQA,IAAR;AAAA,YAAcC,KAAd,sBAAcA,KAAd;AAAA,YAAqBC,MAArB,sBAAqBA,MAArB;;AAKA,aAAKC,QAAL,GAAgBD,MAAhB;AAEA,aAAKE,WAAL,GACE,KAAKN,UAAL,GAAkB,CAAlB,IAAuBE,IAAI,CAACK,MAAL,GAAc,CAArC,GACI,KAAKC,eAAL,CAAqB;AACnBC,UAAAA,KAAK,EAAE,IADY;AAEnBP,UAAAA,IAAI,EAAJA,IAFmB;AAGnBQ,UAAAA,MAAM,EAAEC,WAAGC,SAHQ;AAInBC,UAAAA,IAAI,EAAEF,WAAGG,KAJU;AAKnBX,UAAAA,KAAK,EAALA,KALmB;AAMnBC,UAAAA,MAAM,EAANA;AANmB,SAArB,CADJ,GASI,KAAKI,eAAL,CAAqB;AACnBC,UAAAA,KAAK,EAAE,IADY;AAEnBP,UAAAA,IAAI,EAAE,CAAC,CAAD,CAFa;AAGnBQ,UAAAA,MAAM,EAAEC,WAAGC,SAHQ;AAInBC,UAAAA,IAAI,EAAEF,WAAGG,KAJU;AAKnBX,UAAAA,KAAK,EAAE,CALY;AAMnBC,UAAAA,MAAM,EAAE;AANW,SAArB,CAVN;AAkBD;;AACD,aAAO;AACLW,QAAAA,aAAa,EAAE,KAAKT,WADf;AAELU,QAAAA,gBAAgB,EAAE,KAAKC,iBAAL,EAFb;AAKLC,QAAAA,eAAe,EAAEC,MAAM,CAAC9B,aAAD,CALlB;AAOL+B,QAAAA,SAAS,EAAE,wBAAS9B,OAAT,IAAoBA,OAApB,GAA8B,GAPpC;AASL+B,QAAAA,eAAe,EAAEF,MAAM,CAAC5B,aAAa,CAACC,MAAf,CATlB;AAUL8B,QAAAA,KAAK,EAAE/B,aAAa,CAACE,GAAd,KAAsB,IAAtB,GAA6B,GAA7B,GAAmC;AAVrC,OAAP;AAYD;;;WAED,sBAA8B;AAC5B,aAAO,KAAK8B,WAAL,EAAP;AACD;;;WAED,uBAA+B;AAC7B,kBAOI,KAAKpC,KAAL,CAAWC,cAAX,EAPJ;AAAA,sCACEG,aADF;AAAA,UACEA,aADF,oCACkB;AACdC,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,EAAE;AAFS,OADlB;AAAA,6BAKE+B,IALF;AAAA,UAKEA,IALF,2BAKS,KALT;AAAA,mCAMEC,UANF;AAAA,UAMEA,UANF,iCAMe,IANf;;AAQA,WAAKtC,KAAL,CAAWuC,aAAX,GAA2BnC,aAAa,CAACC,MAAd,GACvBmC,6CADuB,GAEvBC,mCAFJ;AAGA,aAAO,CACL,KAAKzC,KAAL,CAAW0C,eAAX,CAA2B;AACzBC,QAAAA,UAAU,EAAE,SADa;AAEzBC,QAAAA,YAAY,EAAExC,aAAa,CAACC,MAAd,GAAuBwC,mBAAvB,GAA6CC,YAFlC;AAGzBC,QAAAA,cAAc,EAAE3C,aAAa,CAACC,MAAd,GACZ2C,mBADY,GAEZC,YALqB;AAOzBV,QAAAA,aAAa,EAAEnC,aAAa,CAACC,MAAd,GACXmC,6CADW,GAEXC,mCATqB;AAUzBS,QAAAA,KAAK,EAAE,KAAKC,QAAL,EAVkB;AAWzBC,QAAAA,KAAK,EAAE;AAAE/C,UAAAA,MAAM,EAAE;AAAV,SAXkB;AAYzBgD,QAAAA,IAAI,EAAE;AACJhD,UAAAA,MAAM,EAAE,IADJ;AAEJiD,UAAAA,IAAI,EAAE9B,WAAG+B;AAFL,SAZmB;AAgBzBC,QAAAA,OAAO,EAAE,sBAAQnB,IAAR,EAAcC,UAAd;AAhBgB,OAA3B,CADK,CAAP;AAoBD;;;WAED,uBAAqB;AAAA;;AACnB,gCAAKnB,WAAL,wEAAkBsC,OAAlB;AACD;;;WAED,qCAAsC;AACpC,kBAKI,KAAKzD,KAAL,CAAWC,cAAX,EALJ;AAAA,sCACEG,aADF;AAAA,UACEA,aADF,oCACkB;AACdC,QAAAA,MAAM,EAAE,KADM;AAEdC,QAAAA,GAAG,EAAE;AAFS,OADlB;;AAMA,UAAIF,aAAa,CAACC,MAAlB,EAA0B;AACxB,aAAKqD,qBAAL,CAA2BC,sBAA3B,CAAkD;AAChDC,UAAAA,IAAI,EAAE,QAD0C;AAEhDlC,UAAAA,IAAI,EAAEmC,sBAAcC,SAF4B;AAGhDC,UAAAA,UAAU,EAAE;AACVH,YAAAA,IAAI,EAAE,UADI;AAEVI,YAAAA,MAAM,EAAE;AAENC,cAAAA,KAAK,EAAEzC,WAAG0C,WAFJ;AAGNnD,cAAAA,IAAI,EAAE,EAHA;AAINW,cAAAA,IAAI,EAAEF,WAAGG;AAJH,aAFE;AAQVwC,YAAAA,IAAI,EAAE,CARI;AASVC,YAAAA,MAAM,EAAE,gBACNC,OADM,EAENC,UAFM,EAGNC,MAHM,EAINC,YAJM,EAKNC,MALM,EAMH;AAEH,qBAAO,CAACF,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B,CAAP;AACD;AAlBS;AAHoC,SAAlD;AAwBD;AACF;;;EAhIoCG,mB","sourcesContent":["import { AttributeType, gl, IEncodeFeature, IModel } from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { IPolygonLayerStyleOptions } from '../../core/interface';\nimport {\n  polygonTriangulation,\n  polygonTriangulationWithCenter,\n} from '../../core/triangulation';\nimport polygon_frag from '../shaders/polygon_frag.glsl';\nimport polygon_linear_frag from '../shaders/polygon_linear_frag.glsl';\nimport polygon_linear_vert from '../shaders/polygon_linear_vert.glsl';\nimport polygon_vert from '../shaders/polygon_vert.glsl';\nexport default class FillModel extends BaseModel {\n  public getUninforms() {\n    const {\n      raisingHeight = 0,\n      opacity = 1,\n      opacityLinear = {\n        enable: false,\n        dir: 'in',\n      },\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      // u_opacity: opacity,\n\n      u_raisingHeight: Number(raisingHeight),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n\n      u_opacitylinear: Number(opacityLinear.enable),\n      u_dir: opacityLinear.dir === 'in' ? 1.0 : 0.0,\n    };\n  }\n\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      opacityLinear = {\n        enable: false,\n        dir: 'in',\n      },\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    this.layer.triangulation = opacityLinear.enable\n      ? polygonTriangulationWithCenter\n      : polygonTriangulation;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'polygon',\n        vertexShader: opacityLinear.enable ? polygon_linear_vert : polygon_vert,\n        fragmentShader: opacityLinear.enable\n          ? polygon_linear_frag\n          : polygon_frag,\n        // triangulation: polygonTriangulation,\n        triangulation: opacityLinear.enable\n          ? polygonTriangulationWithCenter\n          : polygonTriangulation,\n        blend: this.getBlend(),\n        depth: { enable: false },\n        cull: {\n          enable: true,\n          face: gl.BACK, // gl.FRONT | gl.BACK;\n        },\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  protected registerBuiltinAttributes() {\n    const {\n      opacityLinear = {\n        enable: false,\n        dir: 'in',\n      },\n    } = this.layer.getLayerConfig() as IPolygonLayerStyleOptions;\n    if (opacityLinear.enable) {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'linear',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_linear',\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT,\n          },\n          size: 3,\n          update: (\n            feature: IEncodeFeature,\n            featureIdx: number,\n            vertex: number[],\n            attributeIdx: number,\n            normal: number[],\n          ) => {\n            // center[0] center[1] radius\n            return [vertex[3], vertex[4], vertex[5]];\n          },\n        },\n      });\n    }\n  }\n}\n"],"file":"fill.js"}